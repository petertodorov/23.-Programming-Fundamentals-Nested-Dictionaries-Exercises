using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
class DictRefAdvanced
{
    static void Main(string[] args)
    {
        Dictionary<string, List<int>> dictRef = new Dictionary<string, List<int>>();
        string[] input = Console.ReadLine().Split(new string[] { " -> " }, StringSplitOptions.RemoveEmptyEntries).ToArray();
        while (input[0] != "end")
        {
            string keyName = input[0];
            string[] checkifInt = input[1].Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).ToArray();
            int toCheck = new int();
            for (int i = 0; i < checkifInt.Length; i++)
            {
                int.TryParse(checkifInt[i], out toCheck);
                if (toCheck==0)
                {
                    break;
                }
            }
            if (toCheck == 0)
            {
                string newKey = checkifInt[0];
                if (dictRef.ContainsKey(newKey))
                {
                    if (!dictRef.ContainsKey(keyName))
                    {
                        dictRef.Add(keyName, new List<int>());
                    }
                    List<int> valueToCopy = dictRef[newKey];
                    dictRef[keyName].Clear();
                    dictRef[keyName].AddRange (valueToCopy);
                }
            }
            else
            {
                int[] intToAdd = checkifInt.Select(x => int.Parse(x)).ToArray();
                for (int i = 0; i < intToAdd.Length; i++)
                {
                    if (!dictRef.ContainsKey(keyName))
                    {
                        dictRef.Add(keyName, new List<int>());
                    }
                    dictRef[keyName].Add(intToAdd[i]);
                }
            }
            input = Console.ReadLine().Split(new string[] { " -> " }, StringSplitOptions.RemoveEmptyEntries).ToArray();
        }
        foreach (var item in dictRef)
        {
            Console.WriteLine($"{item.Key} === {string.Join(", ", item.Value)}");
        }
    }
}
